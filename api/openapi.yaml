openapi: 3.0.4
info:
  title: Depot catalog
  description: |
    # Информация о учебном процессе
    - Специальности
    - Группы
    - Студенты
    - Преподаватели
    - Дисциплины
    - Аудитории
  version: 1.0.0
servers:
  - url: http://localhost:18081
tags:
  - name: specs
    description: Спецальности
  - name: groups
    description: Группы
paths:

  /user:
    post:
      tags:
        - user
      summary: Create user.
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array.
      description: Creates list of users with given input array.
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system.
      description: Log into the system.
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session.
      description: Log user out of the system.
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - user
      summary: Update user resource.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: user not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - user
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /spec/create:
    post:
      summary: Добавить специализацию
      description: Возвращает объект добавленной спциализации
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpec'
      responses:
        '200':
          description: Специальность добавленна
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spec'
        default:
          description: Ошибка при создании специальности
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - specs
    
  /spec/create-with-list:
    post:
      summary: Добавить специальности списком
      description: Создает спициальности и возвращает список объектов
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSpec'
      responses:
        '200':
          description: Список объектов созданных спциальностей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Spec'
        default:
          description: Ошибка при создании специальностей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - specs
  /spec/list:
    get:
      summary: Запрос списка специальностей
      description: Возвращает список специальностей
      responses:
        '200':
          description: Список всех специальностей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Spec'
      tags:
        - specs
    
  /group:
    post:
      summary: Добавить группу
      description: Добавляет одну группу и возвращает объект группы с ее индентификатором
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
      responses:
        '200':
          description: Группа добавлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Ошибки добавления группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - groups
    put:
      summary: Изменить группу
      description: |
        Изменяет параметры группу и возвращает объект группы
        
        Изменения применятся к группе по **указанному идентификатору!**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Группа изменена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Ошибки изменения группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - groups
    delete:
      summary: Удалить группу
      description: Удаляет группу и возвращает идентификатор удаленной группы
      parameters:
        - name: id
          in: query
          description: Идентификатор группы для удаления
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Группа изменена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Ошибки изменения группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - groups
  /group/create-with-list:
    post:
      summary: Добавить группы списком
      description: Создает группы и возвращает список объектов
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateGroup'
      responses:
        '200':
          description: Список объектов созданных групп
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        default:
          description: Ошибка при создании группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - groups
  /group/list:
    get:
      summary: Запрос списка групп
      description: Возвращает список групп
      responses:
        '200':
          description: Список всех групп
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      tags:
        - groups
        
components:
  schemas:
    CreateSpec:
      type: object
      required:
        - code
        - name
        - short_name
      properties:
        code:
          type: string
          example: "09.02.06"
        name:
          type: string
          example: "Сетевое и системное администрирование"
        short_name:
          type: string
          example: "СА"
    Spec:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        code:
          type: string
          example: "09.02.06"
        name:
          type: string
          example: "Сетевое и системное администрирование"
        short_name:
          type: string
          example: "СА"
          
    CreateGroup:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 501
        spec_id:
          type: integer
          example: 1
        year:
          type: string
          format: date
          example: "2024"
        duration:
          type: string
          format: uint64
          example: 46
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        code:
          type: integer
          format: int64
          example: 501
        spec_id:
          type: integer
          example: 1
        year:
          type: string
          format: date
          example: "2024"
        duration:
          type: string
          format: uint64
          example: 46
          
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message